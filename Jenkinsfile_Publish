#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}'])
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native'
    }
    stages {
        stage('Checkout Cloud-Native eric-enm-cluster-scoped-resources Git Repository') {
            steps {
                    withCredentials([usernamePassword(credentialsId: 'cenmbuild_key', passwordVariable: 'HELM_REPO_TOKEN', usernameVariable: 'CENMBUILD')]) {
                     sh 'curl -4 -u ${CENMBUILD}:${HELM_REPO_TOKEN} https://arm.epk.ericsson.se/artifactory/proj-enm-dev-internal-helm/eric-enm-cluster-scoped-resources/eric-enm-cluster-scoped-resources-${INTEGRATION_CHART_VERSION}.tgz -o eric-enm-cluster-scoped-resources-${INTEGRATION_CHART_VERSION}.tgz'
                  }
             }
        }
        stage('Publish-Clsuter-Resources') {
            steps {
                script {
                        def bobWithHelmToken = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN,
                                          'INTEGRATION_CHART_VERSION': env.INTEGRATION_CHART_VERSION,
                                ])
                                .toString()
                        sh "${bobWithHelmToken} helm-publish"
                }
            }
        }
        stage('Helm Generate ADP Parameters') {
            steps {
                script {
                        def bobWithAdpParameters = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars(['INTEGRATION_CHART_VERSION': env.INTEGRATION_CHART_VERSION,
                                ])
                                .toString()
                        sh "${bobWithAdpParameters} generate-adp-parameters"
             archiveArtifacts 'artifact.properties'
             }
          }
       }
    }
    post {
        failure {
            mail to: 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
        success {
            script {
                sh(script: 'curl -4 --location --request POST https://ci-portal.seli.wh.rnd.internal.ericsson.com/api/cloudNative/publishVerifiedCNContent/\${PRODUCT_SET_VERSION}/eric-enm-cluster-scoped-resources/\${INTEGRATION_CHART_VERSION}/', returnStdout: true).trim()
            }
        }
        always {
             sh "rm -rf eric-enm-cluster-scoped-resources-${INTEGRATION_CHART_VERSION}.tgz"
             sh "rm -rf artifact.properties"
        }
        cleanup{
             deleteDir()
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
