#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bob = new BobCommand()
        .bobImage(defaultBobImage)
        .needDockerSocket(true)
        .toString()

def GIT_COMMITTER_NAME = 'enmadm100'
def GIT_COMMITTER_EMAIL = 'enmadm100@ericsson.com'
def failedStage = ''

pipeline {
    agent {
        label 'Cloud-Native-Pointfix'
    }
    stages {
        stage('Checkout Cloud-Native eric-enm-cluster-scoped-resources Git Repository') {
            steps {
                git branch: env.BRANCH,
                        url: '${GERRIT_MIRROR}/OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/eric-enm-cluster-resources'
                sh '''
                    git remote set-url origin --push ${GERRIT_CENTRAL}/${REPO}
                '''
            }
        }
        stage('Getting sprint tag') {
            steps {
               script {
                 env.SPRINT_TAG = sh(script: 'echo $PRODUCT_SET | cut -d "." -f1,2', returnStdout: true).trim()
               }
            }
        }
        stage('Lint Helm') {
            steps {
                sh "${bob} lint-helm"
            }
        }
        stage('Generate New Version') {
            steps {
                sh "${bob} generate-new-version"
            }
        }
        stage('Build Chart') {
            steps {
                script {
                       def bobwithbuild = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['HELM_USER': env.HELM_USER,
                                      'HELM_TOKEN': env.HELM_TOKEN,
                                      'SPRINT_TAG': env.SPRINT_TAG,
                            ])
                            .toString()
                        sh "${bobwithbuild} build-helm-pointfix"
                    }
            }
        }
        stage('Publish Helm Chart') {
            steps {
                script {
                    def bobWithHelmToken = new BobCommand()
                            .bobImage(defaultBobImage)
                            .needDockerSocket(true)
                            .envVars(['HELM_REPO_TOKEN': env.HELM_REPO_TOKEN])
                            .toString()
                    sh "${bobWithHelmToken} helm-push"
                }
            }
        }
        stage('Generate INT Parameters') {
            steps {
                sh "${bob} generate-output-parameters"
                archiveArtifacts 'artifact.properties'
                archiveArtifacts '.bob/var.commit-hash'
            }
        }
        stage('Tag Cloud-Native eric-enm-cluster-scoped-resources Repository') {
            steps {

                wrap([$class: 'BuildUser']) {
                    script {
                        def bobWithCommitterInfo = new BobCommand()
                                .bobImage(defaultBobImage)
                                .needDockerSocket(true)
                                .envVars([
                                        'AUTHOR_NAME'        : "${GIT_COMMITTER_NAME}",
                                        'AUTHOR_EMAIL'       : "${GIT_COMMITTER_EMAIL}",
                                        'GIT_COMMITTER_NAME' : "${GIT_COMMITTER_NAME}",
                                        'GIT_COMMITTER_EMAIL': "${GIT_COMMITTER_EMAIL}"
                                ])
                                .toString()
                        sh "${bobWithCommitterInfo} create-git-tag"
                        sh """
                            tag_id=\$(cat .bob/var.version)
                            git push origin \${tag_id}
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        sh "${bob} remove-git-tag"
                    }
                }
            }
        }
      stage('Bump Version') {
          steps {
              script {
                  sh '''
                    echo ${WORKSPACE}
                    chmod -R 777 ${WORKSPACE}
                  '''
                  sh 'hostname'
                  Version = readFile "VERSION_PREFIX"
                  sh 'docker run --rm -v $PWD/VERSION_PREFIX:/app/VERSION -w /app armdocker.rnd.ericsson.se/proj-enm/bump patch'
                  newVersion = readFile "VERSION_PREFIX"
                  env.CLUSTER_VERSION = newVersion
                  currentBuild.displayName = "${BUILD_NUMBER} - Version - " + Version
                  sh '''
                       git add VERSION_PREFIX
                       git commit -m "Version $CLUSTER_VERSION"
                       git push origin HEAD:${BRANCH}
                   '''
               }
           }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                    }
                }
            }
        }
     stage('CLEAN') {
         steps {
          sh "${bob} clean"
        }
            post {
                 failure {
                     script {
                         failedStage = env.STAGE_NAME
                     }
                 }
            }
       }
    }
     post {
        failure {
            // mail to: 'EricssonHyderabad.ENMMisty@tcs.com,EricssonHyderabad.ENMDewdrops@tcs.com',
            // mail only evormax for debug
            mail to: 'PDLCHAKRAS@pdl.internal.ericsson.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"
        }
        cleanup{
             deleteDir()
        }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /etc/group:/etc/group:ro
            |-v /etc/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
}
